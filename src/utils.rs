use core::hash::{Hash, Hasher};
use siphasher::sip::SipHasher;
use std::collections::HashSet;

use std::sync::LazyLock;
pub static RADICALS: LazyLock<HashSet<char>> = LazyLock::new(|| {
    HashSet::from([
        '一', '⼀', '丨', '⼁', '丶', '⼂', '丿', '⼃', '乀', '乁', '乙', '⼄', '乚', '乛', '𠃉',
        '𠃊', '𠃋', '𠃌', '𠃍', '𠃎', '𠃑', '乚', '⺃', '乛', '⺂', '⺄', '亅', '⼅', '𠄌', '二',
        '⼆', '𠄞', '𠄟', '𠄠', '亠', '⼇', '人', '⼈', '亻', '𠆢', '亻', '⺅', '儿', '⼉', '入',
        '⼊', '八', '⼋', '冂', '⼌', '⺆', '冖', '⼍', '冫', '⼎', '几', '⼏', '𠘧', '𠘨', '𠘨',
        '⺇', '凵', '⼐', '𠙴', '刀', '⼑', '刁', '刂', '𠚣', '刂', '⺉', '⺈', '力', '⼒', '勹',
        '⼓', '匕', '⼔', '𠤎', '匚', '⼕', '𠤬', '匸', '⼖', '十', '⼗', '卜', '⼘', '⺊', '卩',
        '⼙', '⺋', '厂', '⼚', '⺁', '厶', '⼛', '又', '⼜', '⺀', '口', '⼝', '囗', '⼞', '土',
        '⼟', '士', '⼠', '夂', '⼡', '𡕒', '夊', '⼢', '夕', '⼣', '大', '⼤', '夨', '女', '⼥',
        '子', '⼦', '孑', '孒', '孓', '𡤼', '宀', '⼧', '寸', '⼨', '小', '⼩', '𡭔', '⺍', '⺌',
        '尢', '⼪', '尣', '𡯁', '𡯂', '𡯁', '⺐', '尣', '⺏', '⺎', '⺑', '尸', '⼫', '𡰣', '屮',
        '⼬', '𡳾', '山', '⼭', '巛', '⼮', '巜', '川', '𡿦', '𡿨', '工', '⼯', '己', '⼰', '已',
        '巳', '巳', '⺒', '巾', '⼱', '干', '⼲', '幺', '⼳', '乡', '⺓', '广', '⼴', '廴', '⼵',
        '廾', '⼶', '𢌬', '弋', '⼷', '𢍺', '弓', '⼸', '𢎗', '𢎘', '彐', '⼹', '彑', '彑', '⺔',
        '⺕', '彡', '⼺', '彳', '⼻', '心', '⼼', '忄', '𢖩', '忄', '⺖', '⺗', '戈', '⼽', '戶',
        '⼾', '户', '戸', '手', '⼿', '扌', '才', '龵', '扌', '⺘', '支', '⽀', '攴', '⽁', '攵',
        '攵', '⺙', '文', '⽂', '斗', '⽃', '𣁬', '斤', '⽄', '𣂑', '方', '⽅', '无', '⽆', '日',
        '⽇', '⺜', '⺛', '曰', '⽈', '月', '⽉', '⺝', '木', '⽊', '朩', '𣎳', '𣎴', '欠', '⽋',
        '止', '⽌', '龰', '𣥂', '歹', '⽍', '𣦵', '𣦶', '⺞', '殳', '⽎', '毋', '⽏', '毌', '𣫬',
        '⺟', '比', '⽐', '毛', '⽑', '𣬛', '氏', '⽒', '⺠', '气', '⽓', '水', '⽔', '氵', '氺',
        '𣱱', '氵', '⺡', '氺', '⺢', '火', '⽕', '灬', '灬', '⺣', '爪', '⽖', '爫', '𤓯', '𤓰',
        '爫', '⺥', '⺤', '父', '⽗', '爻', '⽘', '爿', '⽙', '丬', '𤕪', '丬', '⺦', '片', '⽚',
        '牙', '⽛', '㸦', '牛', '⽜', '牜', '⺧', '犬', '⽝', '犭', '犭', '⺨', '玄', '⽞', '𤣥',
        '玉', '⽟', '王', '𤣩', '𤣩', '⺩', '瓜', '⽠', '瓦', '⽡', '甘', '⽢', '𤮺', '生', '⽣',
        '𤯓', '用', '⽤', '甩', '田', '⽥', '由', '甲', '申', '甴', '电', '𤰒', '疋', '⽦', '𤴓',
        '𤴔', '𤴔', '⺪', '疒', '⽧', '癶', '⽨', '白', '⽩', '皮', '⽪', '皿', '⽫', '目', '⽬',
        '⺫', '矛', '⽭', '矢', '⽮', '石', '⽯', '示', '⽰', '礻', '𥘅', '礻', '⺭', '⺬', '禸',
        '⽱', '禾', '⽲', '𥝌', '穴', '⽳', '𥤢', '立', '⽴', '竹', '⽵', '𥫗', '礻', '⺮', '米',
        '⽶', '糸', '⽷', '糹', '糹', '⺯', '纟', '⺰', '缶', '⽸', '𦈢', '网', '⽹', '䍏', '罒',
        '罓', '𦉪', '𦉫', '𦉭', '𦉰', '𦉪', '⺳', '𦉫', '⺵', '罒', '⺲', '⺫', '罓', '⺱', '⺴',
        '羊', '⽺', '𦍋', '𦍌', '𦍍', '𦍌', '⺷', '⺶', '𦍋', '⺸', '羽', '⽻', '老', '⽼', '耂',
        '考', '耂', '⺹', '而', '⽽', '𦓐', '耒', '⽾', '𦓤', '耳', '⽿', '聿', '⾀', '肀', '𦘒',
        '肀', '⺺', '⺻', '肉', '⾁', '⺼', '臣', '⾂', '𦣞', '自', '⾃', '𦣹', '至', '⾄', '𦤳',
        '𦤴', '臼', '⾅', '𦥑', '𦥒', '𦥓', '𦥑', '⺽', '舌', '⾆', '舛', '⾇', '舟', '⾈', '𠂨',
        '艮', '⾉', '色', '⾊', '艸', '⾋', '䒑', '艹', '艹', '⺾', '⺿', '⻀', '虍', '⾌', '⻁',
        '虫', '⾍', '血', '⾎', '行', '⾏', '衣', '⾐', '衤', '𧘇', '衤', '⻂', '襾', '⾑', '西',
        '覀', '西', '⻄', '覀', '⻃', '見', '⾒', '见', '⻅', '角', '⾓', '𧢲', '𧢲', '⻇', '⻆',
        '言', '⾔', '訁', '𧥛', '𧥜', '讠', '⻈', '谷', '⾕', '𧮫', '豆', '⾖', '豕', '⾗', '𧰧',
        '𧰨', '豸', '⾘', '貝', '⾙', '贝', '⻉', '赤', '⾚', '走', '⾛', '赱', '𧺆', '足', '⾜',
        '𧾷', '𧾷', '⻊', '身', '⾝', '𨈏', '𨈐', '𨈑', '車', '⾞', '车', '⻋', '辛', '⾟', '𨐋',
        '辰', '⾠', '𨑃', '𨑄', '辵', '⾡', '辶', '𠔇', '辶', '⻍', '⻌', '⻎', '邑', '⾢', '𨙨',
        '⻏', '酉', '⾣', '釆', '⾤', '里', '⾥', '金', '⾦', '釒', '钅', '⻐', '長', '⾧', '镸',
        '𨱗', '𨱘', '镸', '⻒', '⻑', '长', '⻓', '門', '⾨', '𨳇', '𨳈', '门', '⻔', '阜', '⾩',
        '阝', '𨸏', '𨸏', '⻕', '阝', '⻖', '⻏', '隶', '⾪', '隹', '⾫', '雨', '⾬', '⻗', '靑',
        '⾭', '青', '青', '⻘', '非', '⾮', '面', '⾯', '靣', '𠚑', '革', '⾰', '韋', '⾱', '韦',
        '⻙', '韭', '⾲', '音', '⾳', '頁', '⾴', '𩑋', '页', '⻚', '風', '⾵', '风', '⻛', '飛',
        '⾶', '𩙱', '飞', '⻜', '食', '⾷', '飠', '𠋑', '𩙿', '𩚀', '𩚁', '𩚃', '𩙿', '⻞', '飠',
        '⻟', '⻝', '饣', '⻠', '首', '⾸', '𩠐', '𩠐', '⻡', '香', '⾹', '馬', '⾺', '𩡧', '马',
        '⻢', '骨', '⾻', '⻣', '高', '⾼', '髙', '髟', '⾽', '鬥', '⾾', '𩰊', '𩰋', '鬯', '⾿',
        '鬲', '⿀', '鬼', '⿁', '⻤', '魚', '⿂', '𤋳', '𩵋', '鱼', '⻥', '鳥', '⿃', '鸟', '⻦',
        '鹵', '⿄', '𠧸', '卤', '⻧', '鹿', '⿅', '𢉖', '麥', '⿆', '麦', '⻨', '麻', '⿇', '黃',
        '⿈', '黄', '黄', '⻩', '黍', '⿉', '黑', '⿊', '黒', '𪐗', '黹', '⿋', '黽', '⿌', '黾',
        '⻪', '鼎', '⿍', '𪔂', '鼓', '⿎', '鼔', '𡔷', '鼠', '⿏', '鼡', '鼻', '⿐', '齊', '⿑',
        '𪗄', '齐', '⻬', '⻫', '齒', '⿒', '𣦋', '⻭', '齿', '⻮', '龍', '⿓', '⻯', '龙', '⻰',
        '龜', '⿔', '𪚦', '𪛉', '⻱', '⻲', '龟', '⻳', '龠', '⿕', '㇇', '㔾', '㣺', '丷', '么',
        '乾', '兀', '兒', '屍', '幹', '廠', '廣', '斉', '旡', '杀', '歺', '母', '氣', '玊', '蟲',
        '𠄎', '𫶧', '𭕄',
    ])
});

pub fn is_radical(c: char) -> bool {
    RADICALS.contains(&c)
}

pub fn is_good_cjk(c: char) -> bool {
    let cp: u32 = c.into();
    (0x4E00..=0x9FFF).contains(&cp)
        || (0x3400..=0x4DBF).contains(&cp)
        || (0x20000..=0x2A6DF).contains(&cp)
        || (0x2A700..=0x2B73F).contains(&cp)
        || (0x2B740..=0x2B81F).contains(&cp)
        || (0x2B820..=0x2CEAF).contains(&cp)
        || (0x2CEB0..=0x2EBEF).contains(&cp)
        || (0x2EBF0..=0x2EE5F).contains(&cp)
        || (0x2F800..=0x2FA1F).contains(&cp)
        || (0xF900..=0xFAFF).contains(&cp)
        || (0x2F800..=0x2FA1F).contains(&cp)
        || (0x2E80..=0x2EFF).contains(&cp)
}
use percent_encoding::{utf8_percent_encode, PercentEncode, NON_ALPHANUMERIC};
pub fn penc(s: &str) -> PercentEncode<'_> {
    utf8_percent_encode(s, NON_ALPHANUMERIC)
}

const BASE91_TABLE: [char; 91] = [
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
    't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
    'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4',
    '5', '6', '7', '8', '9', '!', '#', '$', '%', '&', '(', ')', '*', '+', ',', '-', '.', '/', ':',
    ';', '<', '=', '>', '?', '@', '[', ']', '^', '_', '`', '{', '|', '}', '~',
];
fn base91_encode(mut x: u64) -> String {
    let mut rv_reversed = vec![];
    while x != 0 {
        rv_reversed.push(BASE91_TABLE[(x % 91) as usize]);
        x /= 91;
    }
    rv_reversed.into_iter().rev().collect()
}
pub fn guid_for<T: Hash>(v: T) -> String {
    let mut h = SipHasher::new();
    v.hash(&mut h);
    let u: u64 = h.finish();
    base91_encode(u)
}
